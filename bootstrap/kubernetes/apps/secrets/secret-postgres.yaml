apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: secret-postgresql
  namespace: tools
spec:
  target:
    name: secret-postgresql
    deletionPolicy: Delete
    template:
      type: Opaque
      data:
        password: |-
          {{ .password }}
        authentik-password: |-
          {{ .authentik_password }}
        00-create-authentik.sh: |-
          #!/bin/bash
          set -euo pipefail
          export PGPASSWORD="${POSTGRES_PASSWORD:-}"
          # Usar socket local (sin -h) para autenticaci√≥n local trust
          psql -U postgres -d postgres -v ON_ERROR_STOP=1 <<'SQL'
          DO
          $do$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'authentik') THEN
              CREATE ROLE authentik LOGIN PASSWORD '{{ .authentik_password }}';
            END IF;
          END
          $do$;

          DO
          $do$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'authentik') THEN
              CREATE DATABASE authentik OWNER authentik;
            END IF;
          END
          $do$;
          SQL

  data:
    - secretKey: password
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: secret-postgresql
        property: password
    - secretKey: authentik_password
      sourceRef:
        storeRef:
          name: bitwarden-fields
          kind: ClusterSecretStore
      remoteRef:
        key: secret-postgresql
        property: authentik-password
